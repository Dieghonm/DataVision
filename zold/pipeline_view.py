import streamlit as st
from zold.data_loader import load_dataset

def pipeline_page(params):
    """P√°gina principal do pipeline de dados"""
    data_source = params.get("data_source")
    uploaded_file = params.get("uploaded_file")
    etapas = params.get("etapas", [])

    df, nome_dataset = load_dataset(data_source, uploaded_file)

    if df is not None:
        st.write(f"### {nome_dataset}")
        st.dataframe(df.head())
        st.write(f"Shape: {df.shape[0]} linhas √ó {df.shape[1]} colunas")
        st.write("### Estat√≠sticas descritivas:")
        st.write(df.describe())

        if etapas:
            st.success(f"Etapas selecionadas: {', '.join(etapas)}")
        else:
            st.info("Nenhuma etapa do pipeline foi selecionada.")
    else:
        _render_welcome()


def _render_welcome():
    """Renderiza tela de boas-vindas"""
    st.markdown("""
    Esta aplica√ß√£o permite que voc√™ configure e execute pipelines de Machine Learning 
    de forma visual e interativa.
    
    ### Como usar:
    1. **Selecione um dataset** na barra lateral
    2. **Visualize os dados** antes do processamento
    3. **Configure o algoritmo** e seus par√¢metros
    4. **Defina as m√©tricas** de avalia√ß√£o
    5. **Execute o pipeline** e veja os resultados
    
    **Comece selecionando um dataset na barra lateral!**
    """)
    
    # Se√ß√£o de Datasets Dispon√≠veis
    st.markdown("---")
    st.subheader("üìä Datasets Dispon√≠veis")
    st.markdown("Conhe√ßa os datasets que voc√™ pode usar nesta aplica√ß√£o:")
    
    # Datasets Cl√°ssicos (Sklearn)
    st.markdown("### üìö Datasets Cl√°ssicos (Educacionais)")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        with st.expander("üå∏ Iris Dataset"):
            st.markdown("""
            **Iris Dataset**
            - **Problema**: Classifica√ß√£o de esp√©cies de flores √≠ris
            - **Classes**: 3 (Setosa, Versicolor, Virginica)  
            - **Features**: 4 (comprimento/largura de p√©talas e s√©palas)
            - **Amostras**: 150 (50 por classe)
            - **Uso**: Perfeito para iniciantes - classifica√ß√£o multiclasse simples
            - **Origem**: Ronald Fisher (1936)
            """)
    
    with col2:
        with st.expander("üç∑ Wine Dataset"):
            st.markdown("""
            **Wine Dataset**
            - **Problema**: Classifica√ß√£o de vinhos por origem
            - **Classes**: 3 (diferentes cultivares)
            - **Features**: 13 (an√°lises qu√≠micas: √°lcool, √°cido m√°lico, etc.)
            - **Amostras**: 178 vinhos
            - **Uso**: Classifica√ß√£o com mais complexidade
            - **Origem**: Vinhos da regi√£o de Piemonte, It√°lia
            """)
    
    with col3:
        with st.expander("üéóÔ∏è Breast Cancer"):
            st.markdown("""
            **Breast Cancer Dataset**
            - **Problema**: Diagn√≥stico de c√¢ncer de mama
            - **Classes**: 2 (Maligno, Benigno)
            - **Features**: 30 (caracter√≠sticas dos n√∫cleos celulares)
            - **Amostras**: 569 casos
            - **Uso**: Classifica√ß√£o bin√°ria - aplica√ß√£o m√©dica importante
            - **Origem**: Hospital da Universidade de Wisconsin
            """)
    
    # Datasets Personalizados
    st.markdown("### üéØ Datasets Personalizados (Projetos Reais)")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        with st.expander("üí≥ Credit Scoring"):
            st.markdown("""
            **Credit Scoring Dataset**
            - **Problema**: An√°lise de risco de cr√©dito
            - **Objetivo**: Prever se um cliente vai pagar o empr√©stimo
            - **Tipo**: Classifica√ß√£o bin√°ria (Aprovado/Negado)
            - **Aplica√ß√£o**: Bancos e fintechs
            - **Import√¢ncia**: Decis√µes financeiras automatizadas
            - **Desafios**: Balanceamento, interpretabilidade
            """)
    
    with col2:
        with st.expander("ü©∫ Hypertension"):
            st.markdown("""
            **Hypertension Dataset**
            - **Problema**: Predi√ß√£o de hipertens√£o arterial
            - **Objetivo**: Identificar pacientes com risco de hipertens√£o
            - **Tipo**: Classifica√ß√£o m√©dica
            - **Aplica√ß√£o**: Diagn√≥stico preventivo
            - **Import√¢ncia**: Sa√∫de p√∫blica - preven√ß√£o de doen√ßas cardiovasculares
            - **Features**: Dados demogr√°ficos, estilo de vida, exames
            """)
    
    with col3:
        with st.expander("üì± Phone Addiction"):
            st.markdown("""
            **Teen Phone Addiction Dataset**
            - **Problema**: Identifica√ß√£o de v√≠cio em smartphones
            - **Objetivo**: Detectar adolescentes com uso problem√°tico do celular
            - **Tipo**: Classifica√ß√£o comportamental
            - **Aplica√ß√£o**: Sa√∫de mental, bem-estar digital
            - **Import√¢ncia**: Problema crescente na era digital
            - **Features**: Padr√µes de uso, comportamento, dados psicol√≥gicos
            """)
    
    # Recursos da aplica√ß√£o
    st.markdown("---")
    st.markdown("### ‚ö° Recursos da Aplica√ß√£o")
    
    feature_col1, feature_col2 = st.columns(2)
    
    with feature_col1:
        st.markdown("""
        **üìä An√°lise de Dados:**
        - Pr√©via interativa dos datasets
        - Estat√≠sticas descritivas autom√°ticas
        - Visualiza√ß√µes explorat√≥rias
        - An√°lise de qualidade dos dados
        - Detec√ß√£o de valores faltantes
        - An√°lise de correla√ß√µes
        """)
    
    with feature_col2:
        st.markdown("""
        **ü§ñ Machine Learning:**
        - M√∫ltiplos algoritmos (RF, SVM, LogReg)
        - Configura√ß√£o de hiperpar√¢metros
        - Cross-validation autom√°tica
        - M√©tricas de avalia√ß√£o completas
        - Visualiza√ß√µes de resultados
        - Hist√≥rico de experimentos
        """)
    
    # Hist√≥rico de execu√ß√µes
    if 'executions' in st.session_state and st.session_state.executions:
        st.markdown("---")
        st.subheader("üìã Hist√≥rico de Execu√ß√µes")
        
        for i, execution in enumerate(reversed(st.session_state.executions[-5:])):
            with st.expander(f"Execu√ß√£o {len(st.session_state.executions) - i} - {execution['timestamp'].strftime('%H:%M:%S')}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**Algoritmo:**", execution['config']['model']['algorithm'])
                    st.write("**Status:**", execution['results'].get('status', 'unknown'))
                with col2:
                    if 'evaluation' in execution['results']:
                        metrics = execution['results']['evaluation']['metrics']
                        for metric, value in metrics.items():
                            if isinstance(value, (int, float)):
                                st.metric(metric.title(), f"{value:.4f}")